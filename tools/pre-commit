#!/bin/sh
# Copyright 2013, Alexis La Goutte (See AUTHORS file)
#
# For git user: copy tools/pre-commit to .git/hooks/ folder and make it
# executable. To bypass it for a single commit, use the --no-verify argument.
#
# Alternatively, invoke it directly with the commit ID. Example for checking the
# last commit:
#
#   tools/pre-commit HEAD~
#
# Relative paths are also supported. For instance, if you are in epan/, then you
# could invoke `../tools/pre-commit HEAD` to check for changes to staged files.
#
# From
# http://mark-story.com/posts/view/using-git-commit-hooks-to-prevent-stupid-mistakes
#

# If the commit identifier is not given, use HEAD instead.
COMMIT_ID="${1:-HEAD}"

# Path to hook script in the .git directory
hook_script=${GIT_DIR:-.git}/hooks/pre-commit

# Path to check script in the tools directory
check_script=./tools/pre-commit-check.py

# Always start in the root directory of the source tree, this allows for
# invocations via relative paths (such as ../tools/pre-commit):
cd "$(git rev-parse --show-toplevel)"

# Check for newer (actually, different) versions of the pre-commit script
# (but only if invoked as hook, i.e. the commit ID is not given as argument).
if [ -z "$1" ] && ! cmp -s "$hook_script" tools/pre-commit; then
    echo "Pre-commit hook script is outdated, please update!"
fi

exit_status=0

if [ -e "$check_script" ]
then
    python "$check_script" ${COMMIT_ID} || exit_status=1
else
    echo "File '$check_script' not found. Aborting."
    exit 1
fi

# If there are whitespace errors, print the offending file names and fail. (from git pre-commit.sample)
git diff-index --check --cached ${COMMIT_ID}    || exit_status=1

exit $exit_status

#
#  Editor modelines
#
#  Local Variables:
#  c-basic-offset: 4
#  tab-width: 8
#  indent-tabs-mode: nil
#  End:
#
#  ex: set shiftwidth=4 tabstop=8 expandtab:
#  :indentSize=4:tabSize=8:noTabs=true:
#
